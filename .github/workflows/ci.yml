name: Coverage, SonarQube, Dockerize

on:
  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build, test and aggregate coverage (fail if coverage < 80%)
        run: mvn clean verify

      - name: Upload JaCoCo aggregate report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-aggregate-report
          path: report-aggregate/target/site/jacoco-aggregate/jacoco.xml

  sonar:
    needs: build-and-coverage
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Download JaCoCo aggregate report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-aggregate-report

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.organization=${SONAR_ORGANIZATION} \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}

  dockerize:
    needs: build-and-coverage
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build images and publish for all modules
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

        run: |
          set -e
          DATE=$(date +%Y%m%d)
          
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            TAG="latest"
          else 
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            BRANCH_NAME_CLEAN=$(echo "$BRANCH_NAME" | tr '/' '-')
            TAG="${BRANCH_NAME_CLEAN}-${DATE}-${GITHUB_SHA::7}"
          fi
     
          for pom in $(find ./services -name pom.xml); do
          DIR=$(dirname "$pom")
          MODULE=$(basename "$DIR")
          
          mvn -f "$pom" clean compile jib:build -am -DskipTests \
           -Dimage=${DOCKERHUB_USERNAME}/carhunters-${MODULE}:${TAG} \
           -Ddocker.publishRegistry.username=${DOCKERHUB_USERNAME} \
           -Ddocker.publishRegistry.password=${DOCKERHUB_TOKEN}
          done