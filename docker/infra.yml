name: "Infrastructure"

volumes:
  user-service-postgres-volume:
  notification-service-mongo-volume:
  favorite-service-postgres-volume:
  car-service-postgres-volume:
  car-history-service-mongo-volume:

services:
  user-service-postgres-db:
    image: postgres:17-alpine
    container_name: user-service-postgres-db

    environment:
      - POSTGRES_USER=${USER_MICROSERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USER_MICROSERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USER_MICROSERVICE_POSTGRES_DB}
      - PGPORT=${USER_MICROSERVICE_POSTGRES_PORT}

    command: "-p ${USER_MICROSERVICE_POSTGRES_PORT}"

    ports:
      - "${USER_MICROSERVICE_POSTGRES_PORT}:${USER_MICROSERVICE_POSTGRES_PORT}"

    volumes:
      - user-service-postgres-volume:/var/lib/postgresql/data

    healthcheck:
      test: >
        bash -c "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} && 
                 psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1'"
      interval: 10s
      timeout: 5s
      retries: 5

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  notification-mongo-db:
    image: mongo:8.0.9
    container_name: notification-mongo-db
    command: [ "mongod", "--port", "${NOTIFICATION_MICROSERVICE_MONGO_DB_PORT}" ]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${NOTIFICATION_MICROSERVICE_MONGO_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${NOTIFICATION_MICROSERVICE_MONGO_DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${NOTIFICATION_MICROSERVICE_MONGO_DB_DATABASE}

    healthcheck:
      test: [ "CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:${NOTIFICATION_MICROSERVICE_MONGO_DB_PORT}/test --quiet" ]
      interval: 10s
      timeout: 10s
      retries: 5

    volumes:
      - notification-service-mongo-volume:/data/db

    ports:
      - "${NOTIFICATION_MICROSERVICE_MONGO_DB_PORT}:${NOTIFICATION_MICROSERVICE_MONGO_DB_PORT}"

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  zookeeper:
    image: zookeeper:3.9.3-jre-17
    container_name: zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

    ports:
      - "22181:2181"

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy

    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 10

    ports:
      - "9092:29092"

    environment:
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://host.docker.internal:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  favorite-service-postgres-db:
    image: postgres:17-alpine
    container_name: favorite-service-postgres-db

    environment:
      - POSTGRES_USER=${FAVORITE_MICROSERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${FAVORITE_MICROSERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${FAVORITE_MICROSERVICE_POSTGRES_DB}
      - PGPORT=${FAVORITE_MICROSERVICE_POSTGRES_PORT}

    command: "-p ${FAVORITE_MICROSERVICE_POSTGRES_PORT}"

    ports:
      - "${FAVORITE_MICROSERVICE_POSTGRES_PORT}:${FAVORITE_MICROSERVICE_POSTGRES_PORT}"

    volumes:
      - favorite-service-postgres-volume:/var/lib/postgresql/data

    healthcheck:
      test: >
        bash -c "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} && 
                 psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1'"
      interval: 10s
      timeout: 5s
      retries: 5

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  car-service-postgres-db:
    image: postgres:17-alpine
    container_name: car-service-postgres-db

    environment:
      - POSTGRES_USER=${CAR_MICROSERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${CAR_MICROSERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${CAR_MICROSERVICE_POSTGRES_DB}
      - PGPORT=${CAR_MICROSERVICE_POSTGRES_PORT}

    command: "-p ${CAR_MICROSERVICE_POSTGRES_PORT}"

    ports:
      - "${CAR_MICROSERVICE_POSTGRES_PORT}:${CAR_MICROSERVICE_POSTGRES_PORT}"

    volumes:
      - car-service-postgres-volume:/var/lib/postgresql/data

    healthcheck:
      test: >
        bash -c "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} && 
                 psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1'"
      interval: 10s
      timeout: 5s
      retries: 5

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  car-history-mongo-db:
    image: mongo:8.0.9
    container_name: car-history-mongo-db
    command: [ "mongod", "--port", "${CAR_HISTORY_MICROSERVICE_MONGO_DB_PORT}" ]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${CAR_HISTORY_MICROSERVICE_MONGO_DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${CAR_HISTORY_MICROSERVICE_MONGO_DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${CAR_HISTORY_MICROSERVICE_MONGO_DB_DATABASE}

    healthcheck:
      test: [ "CMD-SHELL", "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:${CAR_HISTORY_MICROSERVICE_MONGO_DB_PORT}/test --quiet" ]
      interval: 10s
      timeout: 10s
      retries: 5

    volumes:
      - car-history-service-mongo-volume:/data/db

    ports:
      - "${CAR_HISTORY_MICROSERVICE_MONGO_DB_PORT}:${CAR_HISTORY_MICROSERVICE_MONGO_DB_PORT}"

    deploy:
      resources:
        limits:
          memory: 512m

        reservations:
          memory: 256M

    networks:
      - carhunters_network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: keycloak
    command:
      - "start-dev" # Only for development
      - "--import-realm"
      - "--http-port=${KEYCLOAK_PORT}"

    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASSWORD}

    ports:
      - "${KEYCLOAK_PORT}:${KEYCLOAK_PORT}"

    volumes:
      - ./resources/keycloak:/opt/keycloak/data/import:ro,Z #Phrase ":ro,Z" is required by SELinux

    deploy:
      resources:
        limits:
          memory: 2GB
        reservations:
          memory: 256M

    networks:
      - carhunters_network

networks:
  carhunters_network:
    driver: bridge
    name: carhunters_network
