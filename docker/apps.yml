name: "Application"

volumes:
  image-service-volume:

services:
  config-service:
    image: dawid0604/carhunters-config-service
    container_name: config-service
    environment:
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - SERVER_PORT=${CONFIG_SERVICE_PORT}
    ports:
      - "${CONFIG_SERVICE_PORT}:${CONFIG_SERVICE_PORT}"
    restart: unless-stopped

    healthcheck:
      test: "curl --fail --silent localhost:${CONFIG_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

    deploy:
      resources:
        limits:
          memory: 700m
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  discovery-service:
    image: dawid0604/carhunters-discovery-service
    container_name: discovery-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - SERVER_PORT=${DISCOVERY_SERVICE_PORT}
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
    ports:
      - "${DISCOVERY_SERVICE_PORT}:${DISCOVERY_SERVICE_PORT}"
    restart: unless-stopped
    depends_on:
      config-service:
        condition: service_healthy

    healthcheck:
      test: "curl --fail --silent localhost:${DISCOVERY_SERVICE_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

    deploy:
      resources:
        limits:
          memory: 700m
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  user-service:
    image: dawid0604/carhunters-user-service
    container_name: user-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - USER_MICROSERVICE_DB_HOST=user-service-postgres-db
      - USER_MICROSERVICE_POSTGRES_PORT=${USER_MICROSERVICE_POSTGRES_PORT}
      - USER_MICROSERVICE_POSTGRES_USER=${USER_MICROSERVICE_POSTGRES_USER}
      - USER_MICROSERVICE_POSTGRES_PASSWORD=${USER_MICROSERVICE_POSTGRES_PASSWORD}
      - USER_MICROSERVICE_POSTGRES_DB=${USER_MICROSERVICE_POSTGRES_DB}
    restart: unless-stopped
    depends_on:
      config-service:
        condition: service_healthy

      discovery-service:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700m
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  notification-service:
    image: dawid0604/carhunters-notification-service
    container_name: notification-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - NOTIFICATION_MICROSERVICE_MONGO_DB_HOST=notification-mongo-db
      - NOTIFICATION_MICROSERVICE_MONGO_DB_USER=${NOTIFICATION_MICROSERVICE_MONGO_DB_USER}
      - NOTIFICATION_MICROSERVICE_MONGO_DB_PASSWORD=${NOTIFICATION_MICROSERVICE_MONGO_DB_PASSWORD}
      - NOTIFICATION_MICROSERVICE_MONGO_DB_PORT=${NOTIFICATION_MICROSERVICE_MONGO_DB_PORT}
      - NOTIFICATION_MICROSERVICE_MONGO_DB_DATABASE=${NOTIFICATION_MICROSERVICE_MONGO_DB_DATABASE}
      - NOTIFICATION_MICROSERVICE_MONGO_DB_AUTHENTICATION_DATABASE=${NOTIFICATION_MICROSERVICE_MONGO_DB_AUTHENTICATION_DATABASE}
      - KAFKA_SERVER=kafka

    restart: unless-stopped
    depends_on:
      discovery-service:
        condition: service_healthy

      config-service:
        condition: service_healthy

      kafka:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700M
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  favorite-service:
    image: dawid0604/carhunters-favorite-service
    container_name: favorite-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - FAVORITE_MICROSERVICE_DB_HOST=favorite-service-postgres-db
      - FAVORITE_MICROSERVICE_POSTGRES_PORT=${FAVORITE_MICROSERVICE_POSTGRES_PORT}
      - FAVORITE_MICROSERVICE_POSTGRES_USER=${FAVORITE_MICROSERVICE_POSTGRES_USER}
      - FAVORITE_MICROSERVICE_POSTGRES_PASSWORD=${FAVORITE_MICROSERVICE_POSTGRES_PASSWORD}
      - FAVORITE_MICROSERVICE_POSTGRES_DB=${FAVORITE_MICROSERVICE_POSTGRES_DB}
    restart: unless-stopped
    depends_on:
      config-service:
        condition: service_healthy

      discovery-service:
        condition: service_healthy

      favorite-service-postgres-db:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700m
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  car-service:
    image: dawid0604/carhunters-car-service
    container_name: car-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - CAR_MICROSERVICE_DB_HOST=car-service-postgres-db
      - CAR_MICROSERVICE_POSTGRES_PORT=${CAR_MICROSERVICE_POSTGRES_PORT}
      - CAR_MICROSERVICE_POSTGRES_USER=${CAR_MICROSERVICE_POSTGRES_USER}
      - CAR_MICROSERVICE_POSTGRES_PASSWORD=${CAR_MICROSERVICE_POSTGRES_PASSWORD}
      - CAR_MICROSERVICE_POSTGRES_DB=${CAR_MICROSERVICE_POSTGRES_DB}
    restart: unless-stopped
    depends_on:
      config-service:
        condition: service_healthy

      discovery-service:
        condition: service_healthy

      car-service-postgres-db:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700m
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  car-history-service:
    image: dawid0604/carhunters-car-history-service
    container_name: car-history-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - CAR_HISTORY_MICROSERVICE_MONGO_DB_HOST=car-history-mongo-db
      - CAR_HISTORY_MICROSERVICE_MONGO_DB_USER=${CAR_HISTORY_MICROSERVICE_MONGO_DB_USER}
      - CAR_HISTORY_MICROSERVICE_MONGO_DB_PASSWORD=${CAR_HISTORY_MICROSERVICE_MONGO_DB_PASSWORD}
      - CAR_HISTORY_MICROSERVICE_MONGO_DB_PORT=${CAR_HISTORY_MICROSERVICE_MONGO_DB_PORT}
      - CAR_HISTORY_MICROSERVICE_MONGO_DB_DATABASE=${CAR_HISTORY_MICROSERVICE_MONGO_DB_DATABASE}
      - CAR_HISTORY_MICROSERVICE_MONGO_DB_AUTHENTICATION_DATABASE=${CAR_HISTORY_MICROSERVICE_MONGO_DB_AUTHENTICATION_DATABASE}
      - KAFKA_SERVER=kafka

    restart: unless-stopped
    depends_on:
      discovery-service:
        condition: service_healthy

      config-service:
        condition: service_healthy

      kafka:
        condition: service_healthy

      car-history-mongo-db:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700M
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  admin-service:
    image: dawid0604/carhunters-admin-service
    container_name: admin-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}

    restart: unless-stopped
    depends_on:
      discovery-service:
        condition: service_healthy

      config-service:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700M
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  image-service:
    image: dawid0604/carhunters-image-service
    container_name: image-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_API_ENVIRONMENT=${CLOUDINARY_API_ENVIRONMENT}

    volumes:
      - ./resources/images:/images

    restart: unless-stopped
    depends_on:
      discovery-service:
        condition: service_healthy

      config-service:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700M
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  gateway-service:
    image: dawid0604/carhunters-gateway-service
    container_name: gateway-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - GATEWAY_PORT=${GATEWAY_PORT}

    restart: unless-stopped
    depends_on:
      discovery-service:
        condition: service_healthy

      config-service:
        condition: service_healthy

    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"

    deploy:
      resources:
        limits:
          memory: 700M
        reservations:
          memory: 256M

    networks:
      - carhunters_network

  frontend-service:
    image: dawid0604/carhunters-frontend-service
    container_name: frontend-service
    environment:
      - CONFIG_SERVICE_INSTANCE=config-service
      - CONFIG_SERVICE_PORT=${CONFIG_SERVICE_PORT}
      - DISCOVERY_SERVICE_INSTANCE=discovery-service
      - DISCOVERY_SERVICE_PORT=${DISCOVERY_SERVICE_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}

    restart: unless-stopped
    depends_on:
      discovery-service:
        condition: service_healthy

      config-service:
        condition: service_healthy

    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"

    deploy:
      resources:
        limits:
          memory: 700M
        reservations:
          memory: 256M

    networks:
      - carhunters_network

networks:
  carhunters_network:
    driver: bridge
    name: carhunters_network